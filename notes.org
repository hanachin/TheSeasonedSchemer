* The Seasoned Schemer
** このメモについて
   Scheme修行を読んで本文で気になった部分や感想などを書いていく。
*** TODO このメモ書きからブログを作成するためのorg-modeの使い方を覚える
** 訳者前書き
*** 2章合わせてSchemeの入門書として完結
*** The Little Schemerと同じく質問とそれに対する答えという形式
*** 前作では「再帰的」な考え方、今回は継続と代入
*** 他の言語では大域的な脱出手段としてはあるがSchemeのようにいつでも使えるわけではないらしい
** 序文
*** 「もし誰かに魚をあげたら、一日食べることができる。もし誰かに釣りを教えたら、一生食べることができる。」
*** Lispは元々「LISt Processor」Lispにはリストがなければならないが。リストはLispの心臓。
*** しかし関数も必要。関数は魂。
*** Scheme手習いは言うなれば魚。生きるためには一日の魚だけでは足りない。今度は釣りを習う番!
** はじめに
*** 「この本の目的は、読者に計算の性質について考えることを教えることにある。」
*** プログラミングの実用的な世界への入門書ではないが、計算の性質を理解する出発点
**** ガイドライン
***** 急いで読んではだめ。5回未満で読み切ろうとしないこと。(ちなみにScheme手習いには2回未満で読み切ろうとしないこと、と書いてる)
***** 飛ばして後ろから読んではだめ。少しずつ難しくなっていく。
***** 「読みながら例を試す」
****** Gaucheで試しながら進める。
****** 関数については本の中の質問を拾ってテストケースを書く。
****** なるべくテストケースを書いてから関数を定義するようにする。
***** TODO 本にちりばめられたヒントから自分の定義を形式化し、覚え、理解する!
***** しかし戒律はその先を読む前に知って理解しておくこと。
** Chapter 11
*** Scheme手習いの続きなので11から始まる。
*** 究極のλを知っていますか?
*** two-in-a-row-b?は2つの引数が変わるのに、質問は1つの引数についてのみ
**** 今までのものとちょっと違う
**** 先行する要素を引数に取っている
*** p10「一方の引数は他方の引数について関数に何かを伝えます」
**** このトリックは面白いなぁ
**** two-in-a-row-bのprecedingでは他方の引数の前の要素を
**** sum-of-prefixes-bのsonssfはこれまでの全ての数の合計を
**** scramble-bのrev-preは自分より前の部分の逆を
*** 第11の戒律「ある関数が、その関数に対する他の引数がいかなるものか知る必要があるときは、付加的な引数を用いるべし。」
*** 出てきてる用語
**** parsleyはパセリ
**** sardinesはイワシ
**** TODO tupは(なんだったっけ)
**** sonssfは「sum of numbers seen so far.(それまで見てきた数の合計)」の略
**** scrambleのニュアンスがちょっと分からない
**** rev-preはreversed prefix
*** 前章で定義したone?やpickなどの手続きを別途定義した
*** 「関数の手がかりは、いつだってその名前です。」
**** いい名前は理解を助けてくれますね。
*** 食事の回数、3回
**** p13 「覚えているならアイスクリームを食べましょう」
**** p15 「スナックを食べる前に」
**** p15 「お茶の時間です。」
**** 「はじめに」によると「食べ物がちょっとした気晴らしになってこの本を一度にたくさん読まないで済むことを願っている」らしい。
***** でも面白いから読み始めると1章、一気に読んでしまう。
